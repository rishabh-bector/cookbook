{"remainingRequest":"/Users/rbector/Desktop/cookbook/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/rbector/Desktop/cookbook/src/App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/rbector/Desktop/cookbook/src/App.vue","mtime":1593731808666},{"path":"/Users/rbector/Desktop/cookbook/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rbector/Desktop/cookbook/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/rbector/Desktop/cookbook/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/rbector/Desktop/cookbook/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rbector/Desktop/cookbook/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgojYXBwIHsKICBmb250LWZhbWlseTogQXZlbmlyLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOwogIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkOwogIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7Cn0KCi5jZW50ZXJlZCB7CiAgbWFyZ2luOiBhdXRvOwogIHdpZHRoOiA1MCU7CiAgaGVpZ2h0OiA0MCU7CiAgdG9wOiAyMCU7Cn0KCi5jZW50ZXJidXR0b24gewogIGxlZnQ6IDUwJTsKICBtYXJnaW4tcmlnaHQ6IC01MCU7CiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7CiAgdG9wOiA1MCU7Cn0K"},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwJA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <div :style=\"appStyle\">\n      <md-card v-if=\"stage == 0\" class=\"centered\">\n        <md-card-content style=\"height: 100%;\">\n          <md-field>\n            <md-textarea\n              placeholder=\"Enter ingredients here.\"\n              v-model=\"autogrow\"\n              md-autogrow\n            ></md-textarea>\n          </md-field>\n          <div class=\"md-layout\" style=\"height: 100%;\">\n            <div class=\"md-layout-item\"></div>\n            <div class=\"md-layout-item\">\n              <md-button v-on:click=\"nextStage\" class=\"md-raised centerbutton\"\n                >Go</md-button\n              >\n            </div>\n            <div class=\"md-layout-item\"></div>\n          </div>\n        </md-card-content>\n      </md-card>\n      <md-card v-if=\"stage == 1\" class=\"centered\">\n        <md-card-content style=\"height: 100%;\">\n          <md-table v-model=\"parsed\">\n            <md-table-row slot=\"md-table-row\" slot-scope=\"{ item }\">\n              <md-table-cell md-label=\"Quantity\" md-sort-by=\"quantity\">{{\n                item.quantity\n              }}</md-table-cell>\n              <md-table-cell md-label=\"Unit\" md-sort-by=\"unit\">{{\n                item.unit\n              }}</md-table-cell>\n              <md-table-cell md-label=\"Ingredient\" md-sort-by=\"ingredient\">{{\n                item.name\n              }}</md-table-cell>\n            </md-table-row>\n          </md-table>\n        </md-card-content>\n      </md-card>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue, Watch } from \"vue-property-decorator\";\n\ninterface IngredientData {\n  name: string;\n  quantity: number;\n  unit: UnitVolume;\n}\n\nenum UnitVolume {\n  Cup = \"cup\",\n  Teaspoon = \"teaspoon\",\n  Tablespoon = \"tablespoon\",\n  None = \"none\"\n}\n\nconst unitStrings = {\n  cup: [\"cup\", \"cups\"],\n  tablespoon: [\"tablespoon\", \"tbsp\"],\n  teaspoon: [\"teaspoon\", \"tsp\"]\n};\n\n@Component({\n  components: {}\n})\nexport default class App extends Vue {\n  private autogrow = \"\";\n  private parsed: IngredientData[] = [];\n  private stage = 0;\n\n  private nextStage() {\n    if (this.stage === 0) {\n      this.parsed = [];\n      this.input.split(\"\\n\").forEach(line => this.parseLine(line));\n      console.log(JSON.stringify(this.parsed, null, 4));\n    }\n    this.stage++;\n  }\n\n  private parseLine(line: string) {\n    const ingredient = {\n      name: \"\",\n      quantity: 0,\n      unit: UnitVolume.Cup\n    };\n    const tokens = line.split(\" \");\n    for (let i = 0; i < tokens.length; i++) {\n      if (this.isQuantity(tokens[i])) {\n        ingredient.quantity = this.parseQuantity(tokens[i]);\n        continue;\n      }\n\n      const parsedUnit = this.parseUnit(tokens[i]);\n      if (parsedUnit != UnitVolume.None) {\n        ingredient.unit = parsedUnit;\n        continue;\n      }\n\n      ingredient.name += tokens[i] + \" \";\n    }\n\n    ingredient.name = ingredient.name.trim();\n    this.parsed.push(ingredient);\n  }\n\n  private parseUnit(token: string): UnitVolume {\n    const processed = token.toLowerCase();\n    const doesIncludeArray = (input: string, terms: string[]): boolean => {\n      for (let i = 0; i < terms.length; i++) {\n        if (input.includes(terms[i])) return true;\n      }\n      return false;\n    };\n\n    if (doesIncludeArray(processed, unitStrings.cup)) {\n      return UnitVolume.Cup;\n    }\n    if (doesIncludeArray(processed, unitStrings.tablespoon))\n      return UnitVolume.Tablespoon;\n    if (doesIncludeArray(processed, unitStrings.teaspoon))\n      return UnitVolume.Teaspoon;\n    return UnitVolume.None;\n  }\n\n  private isQuantity(token: string): boolean {\n    const chars = token.split(\"\");\n    for (let i = 0; i < chars.length; i++) {\n      if (isNaN(Number(chars[i])) && chars[i] !== \"/\" && chars[i] !== \".\")\n        return false;\n    }\n    return true;\n  }\n\n  private parseQuantity(token: string): number {\n    if (token.includes(\"/\")) {\n      const frac = token.split(\"/\");\n      return Number(frac[0]) / Number(frac[1]);\n    }\n    return Number(token);\n  }\n\n  get appStyle(): string {\n    return `height: ${window.innerHeight}px`;\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.centered {\n  margin: auto;\n  width: 50%;\n  height: 40%;\n  top: 20%;\n}\n\n.centerbutton {\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  top: 50%;\n}\n</style>\n"]}]}