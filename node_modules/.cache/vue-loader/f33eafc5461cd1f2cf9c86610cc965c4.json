{"remainingRequest":"/Users/rbector/Desktop/cookbook/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/rbector/Desktop/cookbook/src/App.vue?vue&type=style&index=1&lang=scss&","dependencies":[{"path":"/Users/rbector/Desktop/cookbook/src/App.vue","mtime":1594774128915},{"path":"/Users/rbector/Desktop/cookbook/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rbector/Desktop/cookbook/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/rbector/Desktop/cookbook/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/rbector/Desktop/cookbook/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rbector/Desktop/cookbook/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rbector/Desktop/cookbook/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgIn52dWUtbWF0ZXJpYWwvZGlzdC90aGVtZS9lbmdpbmUiOyAvLyBJbXBvcnQgdGhlIHRoZW1lIGVuZ2luZQoKQGluY2x1ZGUgbWQtcmVnaXN0ZXItdGhlbWUoCiAgImRlZmF1bHQiLAogICgKICAgIHByaW1hcnk6IG1kLWdldC1wYWxldHRlLWNvbG9yKGJsdWUsIEEyMDApLAogICAgLy8gVGhlIHByaW1hcnkgY29sb3Igb2YgeW91ciBhcHBsaWNhdGlvbgogICAgICBhY2NlbnQ6IG1kLWdldC1wYWxldHRlLWNvbG9yKHJlZCwgQTIwMCksCiAgICAvLyBUaGUgYWNjZW50IG9yIHNlY29uZGFyeSBjb2xvcgogICAgICB0aGVtZTogbGlnaHQsCiAgICAvLyBUaGlzIGNhbiBiZSBkYXJrIG9yIGxpZ2h0CiAgKQopOwoKQGluY2x1ZGUgbWQtcmVnaXN0ZXItdGhlbWUoCiAgInRlc3RpbmciLAogICgKICAgIHByaW1hcnk6IG1kLWdldC1wYWxldHRlLWNvbG9yKGJsdWUsIEEyMDApLAogICAgLy8gVGhlIHByaW1hcnkgY29sb3Igb2YgeW91ciBhcHBsaWNhdGlvbgogICAgICBhY2NlbnQ6IG1kLWdldC1wYWxldHRlLWNvbG9yKHJlZCwgQTIwMCksCiAgICAvLyBUaGUgYWNjZW50IG9yIHNlY29uZGFyeSBjb2xvcgogICAgICB0aGVtZTogZGFyaywKICAgIC8vIFRoaXMgY2FuIGJlIGRhcmsgb3IgbGlnaHQKICApCik7CgpAaW1wb3J0ICJ+dnVlLW1hdGVyaWFsL2Rpc3QvdGhlbWUvYWxsIjsgLy8gQXBwbHkgdGhlIHRoZW1lCg=="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8aA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\" v-bind:style=\"topStyle\">\n    <md-button\n      v-if=\"stage == 0 && theme == 'default'\"\n      v-on:click=\"setDarkMode\"\n      class=\"md-flat\"\n      style=\"position: absolute; bottom: 4%; right: 0%; font-size: 10px; text-align: right; line-height: initial;\"\n      v-bind:md-theme=\"theme\"\n    >Dark Theme</md-button>\n    <md-button\n      v-if=\"stage == 0 && theme == 'testing'\"\n      v-on:click=\"setLightMode\"\n      class=\"md-flat\"\n      style=\"position: absolute; bottom: 4%; right: 0%; font-size: 10px; text-align: right; line-height: initial;\"\n      v-bind:md-theme=\"theme\"\n    >Light Theme</md-button>\n    <md-button\n      v-if=\"stage == 0\"\n      v-on:click=\"runTests\"\n      class=\"md-flat\"\n      style=\"position: absolute; bottom: 1%; right: 0%; font-size: 10px; text-align: right; line-height: initial;\"\n      v-bind:md-theme=\"theme\"\n    >Run Tests</md-button>\n    <md-button\n      v-if=\"stage == -1\"\n      v-on:click=\"backToMain\"\n      class=\"md-flat\"\n      style=\"position: absolute; bottom: 1%; right: 0%; font-size: 10px; text-align: right; line-height: initial;\"\n      v-bind:md-theme=\"theme\"\n    >Back</md-button>\n    <div :style=\"appStyle\">\n      <md-card v-if=\"stage == 0\" class=\"centered\" v-bind:md-theme=\"theme\">\n        <md-card-content style=\"height: 100%;\">\n          <md-field>\n            <md-textarea placeholder=\"Enter ingredients here.\" v-model=\"autogrow\" md-autogrow></md-textarea>\n          </md-field>\n        </md-card-content>\n        <div class=\"md-layout\" style=\"height: 100%;\">\n          <div class=\"md-layout-item\"></div>\n          <div class=\"md-layout-item\">\n            <md-button\n              v-on:click=\"nextStage\"\n              class=\"md-raised centerbutton\"\n              style=\"font-size: 15px;\"\n            >Go</md-button>\n          </div>\n          <div class=\"md-layout-item\"></div>\n        </div>\n      </md-card>\n      <div v-if=\"stage == 1\" style=\"height: 100%;\">\n        <span\n          class=\"md-subheading\"\n          style=\"position: absolute; left: 50%; top: 50%; margin-right: -50%; transform: translate(-50%, -50%);\"\n        >Organizing the cookbook...</span>\n        <pacman-loader\n          class=\"centered\"\n          style=\"position: absolute; left: 47.5%; top: 40%; margin-right: -50%; transform: translate(-50%, -50%);\"\n        />\n      </div>\n      <div v-if=\"stage == 2\" style=\"height: 100%;\">\n        <span\n          class=\"md-title\"\n          style=\"position: absolute; left: 50%; top: 10%; margin-right: -50%; transform: translate(-50%, -50%);\"\n        >Ok, does this look right?</span>\n        <md-card class=\"centered-without-height\" v-bind:md-theme=\"theme\">\n          <md-card-content style=\"height: 100%;\">\n            <md-table v-model=\"parsed\">\n              <md-table-row slot=\"md-table-row\" slot-scope=\"{ item }\">\n                <md-table-cell md-label=\"Quantity\" md-sort-by=\"quantity\">\n                  {{\n                  item.quantity\n                  }}\n                </md-table-cell>\n                <md-table-cell md-label=\"Unit\" md-sort-by=\"unit\">\n                  {{\n                  item.unit\n                  }}\n                </md-table-cell>\n                <md-table-cell md-label=\"Ingredient\" md-sort-by=\"ingredient\">\n                  {{\n                  item.name\n                  }}\n                </md-table-cell>\n              </md-table-row>\n            </md-table>\n          </md-card-content>\n          <div class=\"md-layout\" style=\"height: 100%;\">\n            <div class=\"md-layout-item\"></div>\n            <div class=\"md-layout-item\">\n              <md-button v-on:click=\"nextStage\" class=\"md-raised md-primary centerbutton-top\">Yes</md-button>\n            </div>\n            <div class=\"md-layout-item\"></div>\n          </div>\n        </md-card>\n      </div>\n      <div v-if=\"stage == 3\" style=\"height: 100%;\">\n        <span\n          class=\"md-subheading\"\n          style=\"position: absolute; left: 50%; top: 50%; margin-right: -50%; transform: translate(-50%, -50%);\"\n        >Crunching the numbers...</span>\n        <pacman-loader\n          class=\"centered\"\n          style=\"position: absolute; left: 47.5%; top: 40%; margin-right: -50%; transform: translate(-50%, -50%);\"\n        />\n      </div>\n      <div v-if=\"stage == 4\" style=\"height: 100%;\">\n        <span\n          class=\"md-title\"\n          style=\"position: absolute; left: 50%; top: 10%; margin-right: -50%; transform: translate(-50%, -50%);\"\n        >Here's what I've got:</span>\n        <md-card class=\"centered-without-height\" v-bind:md-theme=\"theme\">\n          <md-card-content style=\"height: 100%;\">\n            <md-table v-model=\"parsed\">\n              <md-table-row slot=\"md-table-row\" slot-scope=\"{ item }\">\n                <md-table-cell md-label=\"Quantity\" md-sort-by=\"quantity\">\n                  {{\n                  item.quantity\n                  }}\n                </md-table-cell>\n                <md-table-cell md-label=\"Unit\" md-sort-by=\"unit\">\n                  {{\n                  item.unit\n                  }}\n                </md-table-cell>\n                <md-table-cell md-label=\"Ingredient\" md-sort-by=\"ingredient\">\n                  {{\n                  item.name\n                  }}\n                </md-table-cell>\n                <md-table-cell v-bind:md-label=\"makeLabel(item)\" md-sort-by=\"cost\">\n                  <a v-bind:href=\"makeLink(item)\">${{\n                    (displayPriceOf(item).quantity).toFixed(2)\n                  }}</a>\n                </md-table-cell>\n                <md-table-cell md-label=\"Total Cost\" md-sort-by=\"ingredient\">\n                  ${{\n                    (displayPriceOf(item).quantity * item.quantity).toFixed(2)\n                  }}\n                </md-table-cell>\n              </md-table-row>\n            </md-table>\n          </md-card-content>\n          <div class=\"md-layout\" style=\"height: 100%;\">\n            <div class=\"md-layout-item\"></div>\n            <div class=\"md-layout-item\">\n              <md-button v-on:click=\"nextStage\" class=\"md-raised md-primary centerbutton-top\">Yes</md-button>\n            </div>\n            <div class=\"md-layout-item\"></div>\n          </div>\n        </md-card>\n      </div>\n      <div v-if=\"stage == -1\" style=\"height: 100%;\">\n        <md-card class=\"centered\" v-bind:md-theme=\"theme\">\n          <md-card-content style=\"height: 100%;\">\n            <md-table v-model=\"testStatus\">\n              <md-table-row slot=\"md-table-row\" slot-scope=\"{ item }\">\n                <md-table-cell\n                  href=\"https://weather.com\"\n                  md-label=\"Test\"\n                  md-sort-by=\"quantity\"\n                  v-bind:style=\"testColor(item.name)\"\n                >\n                  {{\n                  item.name\n                  }}\n                </md-table-cell>\n                <md-table-cell\n                  md-label=\"Status\"\n                  md-sort-by=\"unit\"\n                  v-bind:style=\"testColor(item.name)\"\n                >\n                  {{\n                  item.status\n                  }}\n                </md-table-cell>\n              </md-table-row>\n            </md-table>\n          </md-card-content>\n        </md-card>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue, Watch } from \"vue-property-decorator\";\nimport { IngredientData, VolumeUnits, ConvertUnit, Amount, MassUnits, OuncesToCups, Unit } from \"./common/common\";\nimport { TestCases, TestStatus } from \"./tests/tests\";\nimport { ParseLine, ParseUnit } from './logic/parser';\nimport * as RM from 'typed-rest-client/RestClient';\n\ninterface PriceResponse {\n  average: number;\n  unit: string;\n}\n\n@Component({\n  components: {}\n})\nexport default class App extends Vue {\n  private autogrow = \"2 teaspoon vanilla extract\";\n  private parsed: IngredientData[] = [];\n  private stage = 0;\n  private theme = \"default\";\n  private statuses: TestStatus[] = [];\n\n  async calculateIngPrice(ing: IngredientData): Promise<Amount> {\n    const rest: RM.RestClient = new RM.RestClient('rest', 'http://localhost:5000');\n    const res: RM.IRestResponse<PriceResponse> = await rest.get<PriceResponse>(`/ing?ing=${ing.name}&unit=*`)\n    let resMarshal: PriceResponse = { average: 0, unit: ''}\n    if (res.result) resMarshal = res.result;\n    console.log('Got resp: ' + JSON.stringify(resMarshal));\n    const parsedUnit = ParseUnit(resMarshal.unit);\n\n    // The server returns a price, along with its unit. Out of the search results, the server\n    // chooses the most common unit to include in this average price. Now, we must determine\n    // how to transform this unit into the unit given by the user.\n    //\n    // There are 3 possible cases:\n    //    1. The unit returned by the server is the same as the user's unit. No need to do any conversions.\n    //    2. The unit returned by the server is in the same class (volume or mass) as the user's unit, so can be easily converted via table.\n    //    3. The unit returned by the server is in a different class as the user's unit. This leads to 2 risky options and a shitty fallback:\n    //        a. Try to google to determine the ingredient-specific volume <-> mass conversion for this unit\n    //        b. Try to use a handmade cache of common ingredient-specific conversions\n    //\n    //        c. As a fallback, ask the user to input their original amount in this new unit.\n\n    // No need for conversion\n    if (parsedUnit === ing.unit || ing.unit === Unit.None) {\n      return {\n        quantity: resMarshal.average,\n        unit: parsedUnit,\n      };\n    }\n\n    const price: Amount = {quantity: resMarshal.average, unit: parsedUnit};\n    console.log('Got price: ' + JSON.stringify(price));\n\n    // Volume -> volume conversion\n    if (VolumeUnits.includes(parsedUnit) && VolumeUnits.includes(ing.unit)) {\n      return ConvertUnit(price, ing.unit);\n    }\n\n    // Mass -> mass conversion\n    if (MassUnits.includes(parsedUnit) && MassUnits.includes(ing.unit)) {\n      return ConvertUnit(price, ing.unit);\n    }\n\n    // Try cache lookup\n    let conversionFactor = null;\n    Object.keys(OuncesToCups).forEach((ingName) => {\n      if (ing.name.includes(ingName)) conversionFactor = OuncesToCups[ingName];\n    })\n    if (conversionFactor) {\n      price.quantity = price.quantity * conversionFactor;\n      return ConvertUnit(price, ing.unit);\n    }\n\n    return {\n      quantity: -1,\n      unit: Unit.None,\n    };\n  }\n\n  private makeLabel(item: IngredientData): string {\n    return `Cost / ${this.displayPriceOf(item).unit}`;\n  }\n\n  private makeLink(item: IngredientData): string {\n    return `https://www.heb.com/search/?q=${item.name}`;\n  }\n\n  async nextStage() {\n    if (this.stage === 0) {\n      this.runParser();\n    }\n    this.stage++;\n    if (this.stage === 3) {\n      this.parsed.forEach(async (ing) => {\n        ing.price = await this.calculateIngPrice(ing).then((p) => {\n          console.log(`Price is ${p.quantity} per ${ing.unit}`)\n          this.$nextTick().then(() => {\n            this.$forceUpdate();\n            this.stage = 4;\n          })\n          return p;\n        });\n      })\n    }\n  }\n\n  private runParser() {\n    this.parsed = [];\n    this.autogrow.split(\"\\n\").forEach(line => this.parsed.push(ParseLine(line)));\n  }\n\n  private runTests() {\n    this.stage = -1;\n    this.statuses = [];\n    TestCases.forEach(tc => {\n      this.statuses.push({\n        name: tc.name,\n        status: \"NOT STARTED\"\n      });\n    });\n    TestCases.forEach(tc => {\n      const statusDataMaybe = this.statuses.find(s => s.name == tc.name);\n      let statusData = this.statuses[0];\n      if (statusDataMaybe) statusData = statusDataMaybe;\n      statusData.status = \"RUNNING\";\n      this.autogrow = tc.input;\n      this.runParser();\n      let correct = true;\n      let failed = \"\";\n      let reasonComplete = false;\n      this.parsed.forEach((ing, index) => {\n        if (ing.name !== tc.output[index].name) {\n          correct = false;\n          failed = `Expected: ${tc.output[index].name}\\nGot: ${ing.name}`;\n        }\n        if (ing.quantity !== tc.output[index].quantity) {\n          correct = false;\n          failed = `Expected: ${tc.output[index].quantity}\\nGot: ${ing.quantity}`;\n        }\n        if (ing.unit !== tc.output[index].unit) {\n          correct = false;\n          failed = `Expected: ${tc.output[index].unit}\\nGot: ${ing.unit}`;\n        }\n        if (!correct && !reasonComplete) {\n          failed += `\\nFailed at: ${JSON.stringify(ing, null, 4)}`;\n          reasonComplete = true;\n        }\n      });\n      if (correct) statusData.status = \"PASS\";\n      else {\n        statusData.status = \"FAIL\";\n        console.log(\"TEST FAILED: \\n\" + failed);\n      }\n    });\n  }\n\n  private displayPriceOf(ing: IngredientData): Amount {\n    if (ing.price) return ing.price;\n    return {\n      quantity: 0,\n      unit: ing.unit,\n    }\n  }\n\n  private backToMain() {\n    this.autogrow = \"\";\n    this.parsed = [];\n    this.stage = 0;\n  }\n\n  private testColor(name: string) {\n    const statusData = this.statuses.find(s => s.name == name);\n    if (statusData)\n      if (statusData.status == \"PASS\") return \"color: darkseagreen;\";\n    if (statusData) if (statusData.status == \"FAIL\") return \"color: orangered;\";\n  }\n\n  private setDarkMode() {\n    this.theme = \"testing\";\n  }\n\n  private setLightMode() {\n    this.theme = \"default\";\n  }\n\n  get testStatus(): TestStatus[] {\n    return this.statuses;\n  }\n\n  get topStyle(): string {\n    if (this.theme === \"default\") return \"\";\n    return \"background-color: #424242;\";\n  }\n\n  get appStyle(): string {\n    return `height: ${window.innerHeight}px`;\n  }\n\n  @Watch(\"stage\")\n  stageChanged(newStage: number) {\n    if (newStage === 1) {\n      setTimeout(() => {\n        this.stage++;\n      }, 0);\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.centered {\n  margin: auto;\n  width: 50%;\n  height: 40%;\n  top: 20%;\n}\n\n.centered-without-height {\n  margin: auto;\n  width: 50%;\n  top: 20%;\n}\n\n.centerbutton {\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  top: 50%;\n}\n\n.centerbutton-top {\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  top: 200%;\n}\n</style>\n\n<style lang=\"scss\">\n@import \"~vue-material/dist/theme/engine\"; // Import the theme engine\n\n@include md-register-theme(\n  \"default\",\n  (\n    primary: md-get-palette-color(blue, A200),\n    // The primary color of your application\n      accent: md-get-palette-color(red, A200),\n    // The accent or secondary color\n      theme: light,\n    // This can be dark or light\n  )\n);\n\n@include md-register-theme(\n  \"testing\",\n  (\n    primary: md-get-palette-color(blue, A200),\n    // The primary color of your application\n      accent: md-get-palette-color(red, A200),\n    // The accent or secondary color\n      theme: dark,\n    // This can be dark or light\n  )\n);\n\n@import \"~vue-material/dist/theme/all\"; // Apply the theme\n</style>"]}]}