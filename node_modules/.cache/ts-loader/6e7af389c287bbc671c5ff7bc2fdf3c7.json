{"remainingRequest":"/Users/rbector/Desktop/cookbook/node_modules/babel-loader/lib/index.js!/Users/rbector/Desktop/cookbook/node_modules/ts-loader/index.js??ref--14-2!/Users/rbector/Desktop/cookbook/node_modules/eslint-loader/index.js??ref--13-0!/Users/rbector/Desktop/cookbook/src/common/common.ts","dependencies":[{"path":"/Users/rbector/Desktop/cookbook/src/common/common.ts","mtime":1594774289824},{"path":"/Users/rbector/Desktop/cookbook/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rbector/Desktop/cookbook/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/rbector/Desktop/cookbook/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/Users/rbector/Desktop/cookbook/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMiOwpleHBvcnQgdmFyIFVuaXQ7CgooZnVuY3Rpb24gKFVuaXQpIHsKICAvLyBWb2x1bWUKICBVbml0WyJDdXAiXSA9ICJDdXAiOwogIFVuaXRbIlRlYXNwb29uIl0gPSAiVGVhc3Bvb24iOwogIFVuaXRbIlRhYmxlc3Bvb24iXSA9ICJUYWJsZXNwb29uIjsKICBVbml0WyJGbHVpZE91bmNlIl0gPSAiRmx1aWRPdW5jZSI7IC8vIE1hc3MKCiAgVW5pdFsiT3VuY2UiXSA9ICJPdW5jZSI7CiAgVW5pdFsiR3JhbSJdID0gIkdyYW0iOwogIFVuaXRbIk1pbGxpZ3JhbSJdID0gIk1pbGxpZ3JhbSI7CiAgVW5pdFsiS2lsb2dyYW0iXSA9ICJLaWxvZ3JhbSI7CiAgVW5pdFsiUG91bmQiXSA9ICJQb3VuZCI7IC8vIFNwZWNpYWwKCiAgVW5pdFsiQ291bnQiXSA9ICJOb25lIjsKICBVbml0WyJOb25lIl0gPSAiTm9uZSI7Cn0pKFVuaXQgfHwgKFVuaXQgPSB7fSkpOwoKZXhwb3J0IHZhciBWb2x1bWVVbml0cyA9IFtVbml0LkN1cCwgVW5pdC5UZWFzcG9vbiwgVW5pdC5UYWJsZXNwb29uLCBVbml0LkZsdWlkT3VuY2VdOwpleHBvcnQgdmFyIE1hc3NVbml0cyA9IFtVbml0Lk91bmNlXTsgLy8gUGFyc2luZyB0b2tlbnMKCmV4cG9ydCB2YXIgVW5pdFN0cmluZ3MgPSB7CiAgLy8gVm9sdW1lCiAgY3VwOiBbImN1cCIsICJjdXBzIl0sCiAgdGFibGVzcG9vbjogWyJ0YWJsZXNwb29uIiwgInRic3AiXSwKICB0ZWFzcG9vbjogWyJ0ZWFzcG9vbiIsICJ0c3AiXSwKICBmbHVpZG91bmNlOiBbImZsIG96IiwgImZsdWlkIG91bmNlIiwgImZsdWlkIG91bmNlcyJdLAogIC8vIE1hc3MKICBvdW5jZTogWyJvdW5jZSIsICJvdW5jZXMiLCAib3oiXSwKICBncmFtOiBbImdyYW0iLCAiZyJdLAogIG1pbGxpZ3JhbTogWyJtaWxsaWdyYW0iLCAibWlsbGlncmFtcyIsICJtZyJdLAogIGtpbG9ncmFtOiBbImtpbG9ncmFtIiwgImtpbG9ncmFtcyIsICJrZyJdLAogIHBvdW5kOiBbInBvdW5kIiwgInBvdW5kcyIsICJsYiJdCn07CmV4cG9ydCB2YXIgQ29udmVyc2lvblRhYmxlID0gewogIC8vIFZvbHVtZQogIFRhYmxlc3Bvb246IHsKICAgIEN1cDogMC4wNjI1CiAgfSwKICBUZWFzcG9vbjogewogICAgQ3VwOiAwLjAyMDgzCiAgfSwKICBGbHVpZE91bmNlOiB7CiAgICBDdXA6IDAuMTI1CiAgfSwKICBDdXA6IHsKICAgIFRhYmxlc3Bvb246IDE2LAogICAgVGVhc3Bvb246IDQ4LAogICAgRmx1aWRPdW5jZTogOCwKICAgIEN1cDogMQogIH0sCiAgLy8gTWFzcwogIE91bmNlOiB7CiAgICBHcmFtOiAyOC4zNDk1CiAgfSwKICBQb3VuZDogewogICAgR3JhbTogNDUzLjU5MgogIH0sCiAgTWlsbGlncmFtOiB7CiAgICBHcmFtOiAwLjAwMQogIH0sCiAgS2lsb2dyYW06IHsKICAgIEdyYW06IDEwMDAKICB9LAogIEdyYW06IHsKICAgIE91bmNlOiAwLjAzNTI3NCwKICAgIFBvdW5kOiAwLjAwMjIwNDYyLAogICAgR3JhbTogMQogIH0KfTsKZXhwb3J0IGZ1bmN0aW9uIENvbnZlcnRVbml0KGFtb3VudCwgbmV3VW5pdCkgewogIC8vIENvbnZlcnRpbmcgZnJvbSB2b2x1bWUgLT4gdm9sdW1lIG9yIG1hc3MgLT4gbWFzcwogIGlmIChWb2x1bWVVbml0cy5pbmNsdWRlcyhhbW91bnQudW5pdCkgJiYgVm9sdW1lVW5pdHMuaW5jbHVkZXMobmV3VW5pdCkgfHwgTWFzc1VuaXRzLmluY2x1ZGVzKGFtb3VudC51bml0KSAmJiBNYXNzVW5pdHMuaW5jbHVkZXMobmV3VW5pdCkpIHsKICAgIHZhciB1bml0U3RyID0gVW5pdFthbW91bnQudW5pdF07CiAgICB2YXIgZmluYWxVbml0U3RyID0gVW5pdFtuZXdVbml0XTsKICAgIHZhciBjdXBzID0gYW1vdW50LnF1YW50aXR5IC8gQ29udmVyc2lvblRhYmxlW3VuaXRTdHJdW1VuaXQuQ3VwXTsKICAgIGFtb3VudC5xdWFudGl0eSA9IGN1cHMgLyBDb252ZXJzaW9uVGFibGVbVW5pdC5DdXBdW2ZpbmFsVW5pdFN0cl07CiAgICBhbW91bnQudW5pdCA9IG5ld1VuaXQ7CiAgfQoKICByZXR1cm4gYW1vdW50Owp9CmV4cG9ydCB2YXIgRnJhY01hcCA9IHsKICAiwr0iOiAiMS8yIiwKICAi4oWTIjogIjEvMyIsCiAgIuKFlCI6ICIyLzMiLAogICLCvCI6ICIxLzQiLAogICLCviI6ICIzLzQiLAogICLihZUiOiAiMS81IiwKICAi4oWZIjogIjEvNiIsCiAgIuKFmyI6ICIxLzgiLAogICLihZIiOiAiMS8xMCIKfTsKZXhwb3J0IHZhciBPdW5jZXNUb0N1cHMgPSB7CiAgbWlsazogMC4xMTU3NCwKICBidXR0ZXI6IDAuMTI1Cn07IC8vIG1pbGs="},{"version":3,"sources":["/Users/rbector/Desktop/cookbook/node_modules/eslint-loader/index.js??ref--13-0!/Users/rbector/Desktop/cookbook/src/common/common.ts"],"names":[],"mappings":"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","sourcesContent":["export interface IngredientData {\n  name: string;\n  quantity: number;\n  unit: Unit;\n  price?: Amount;\n}\n\nexport enum Unit {\n  // Volume\n  Cup = \"Cup\",\n  Teaspoon = \"Teaspoon\",\n  Tablespoon = \"Tablespoon\",\n  FluidOunce = \"FluidOunce\",\n\n  // Mass\n  Ounce = \"Ounce\",\n  Gram = \"Gram\",\n  Milligram = \"Milligram\",\n  Kilogram = \"Kilogram\",  \n  Pound = \"Pound\",\n\n  // Special\n  Count = \"None\",\n  None = \"None\",\n}\n\nexport const VolumeUnits = [\n  Unit.Cup,\n  Unit.Teaspoon,\n  Unit.Tablespoon,\n  Unit.FluidOunce,\n];\nexport const MassUnits = [Unit.Ounce];\n\n// Parsing tokens\nexport const UnitStrings = {\n  // Volume\n  cup: [\"cup\", \"cups\"],\n  tablespoon: [\"tablespoon\", \"tbsp\"],\n  teaspoon: [\"teaspoon\", \"tsp\"],\n  fluidounce: [\"fl oz\", \"fluid ounce\", \"fluid ounces\"],\n\n  // Mass\n  ounce: [\"ounce\", \"ounces\", \"oz\"],\n  gram: [\"gram\", \"g\"],\n  milligram: [\"milligram\", \"milligrams\", \"mg\"],\n  kilogram: [\"kilogram\", \"kilograms\", \"kg\"],\n  pound: [\"pound\", \"pounds\", \"lb\"],\n};\n\nexport const ConversionTable: Record<string, Record<string, number>> = {\n  // Volume\n  Tablespoon: {\n    Cup: 0.0625,\n  },\n  Teaspoon: {\n    Cup: 0.02083,\n  },\n  FluidOunce: {\n    Cup: 0.125,\n  },\n  Cup: {\n    Tablespoon: 16,\n    Teaspoon: 48,\n    FluidOunce: 8,\n    Cup: 1,\n  },\n\n  // Mass\n  Ounce: {\n    Gram: 28.3495,\n  },\n  Pound: {\n    Gram: 453.592,\n  },\n  Milligram: {\n    Gram: 0.001,\n  },\n  Kilogram: {\n    Gram: 1000,\n  },\n  Gram: {\n    Ounce: 0.035274,\n    Pound: 0.00220462,\n    Gram: 1,\n  }\n};\n\nexport interface Amount {\n  quantity: number;\n  unit: Unit;\n}\n\nexport function ConvertUnit(amount: Amount, newUnit: Unit): Amount {\n  // Converting from volume -> volume or mass -> mass\n  if ((VolumeUnits.includes(amount.unit) && VolumeUnits.includes(newUnit)) || (MassUnits.includes(amount.unit) && MassUnits.includes(newUnit))) {\n    const unitStr: string = Unit[amount.unit];\n    const finalUnitStr: string = Unit[newUnit];\n    const cups = amount.quantity / ConversionTable[unitStr][Unit.Cup];\n    amount.quantity = cups / ConversionTable[Unit.Cup][finalUnitStr];\n    amount.unit = newUnit\n  }\n\n  return amount;\n}\n\nexport const FracMap: Record<string, string> = {\n  \"½\": \"1/2\",\n  \"⅓\": \"1/3\",\n  \"⅔\": \"2/3\",\n  \"¼\": \"1/4\",\n  \"¾\": \"3/4\",\n  \"⅕\": \"1/5\",\n  \"⅙\": \"1/6\",\n  \"⅛\": \"1/8\",\n  \"⅒\": \"1/10\",\n};\n\nexport const OuncesToCups: Record<string, number> = {\n  milk: 0.11574,\n  butter: 0.125,\n}\n\n// milk\n"],"sourceRoot":""}]}