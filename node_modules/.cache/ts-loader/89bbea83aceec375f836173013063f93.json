{"remainingRequest":"/Users/rbector/Desktop/cookbook/node_modules/babel-loader/lib/index.js!/Users/rbector/Desktop/cookbook/node_modules/ts-loader/index.js??ref--14-2!/Users/rbector/Desktop/cookbook/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/rbector/Desktop/cookbook/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/rbector/Desktop/cookbook/src/App.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/rbector/Desktop/cookbook/src/App.vue","mtime":1594774128915},{"path":"/Users/rbector/Desktop/cookbook/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rbector/Desktop/cookbook/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/rbector/Desktop/cookbook/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/Users/rbector/Desktop/cookbook/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rbector/Desktop/cookbook/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/rbector/Desktop/cookbook/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/rbector/Desktop/cookbook/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/rbector/Desktop/cookbook/src/App.vue?vue&type=script&lang=ts&"],"names":[],"mappings":"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","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { Component, Vue, Watch } from \"vue-property-decorator\";\nimport { IngredientData, VolumeUnits, ConvertUnit, Amount, MassUnits, OuncesToCups, Unit } from \"./common/common\";\nimport { TestCases, TestStatus } from \"./tests/tests\";\nimport { ParseLine, ParseUnit } from './logic/parser';\nimport * as RM from 'typed-rest-client/RestClient';\n\ninterface PriceResponse {\n  average: number;\n  unit: string;\n}\n\n@Component({\n  components: {}\n})\nexport default class App extends Vue {\n  private autogrow = \"2 teaspoon vanilla extract\";\n  private parsed: IngredientData[] = [];\n  private stage = 0;\n  private theme = \"default\";\n  private statuses: TestStatus[] = [];\n\n  async calculateIngPrice(ing: IngredientData): Promise<Amount> {\n    const rest: RM.RestClient = new RM.RestClient('rest', 'http://localhost:5000');\n    const res: RM.IRestResponse<PriceResponse> = await rest.get<PriceResponse>(`/ing?ing=${ing.name}&unit=*`)\n    let resMarshal: PriceResponse = { average: 0, unit: ''}\n    if (res.result) resMarshal = res.result;\n    console.log('Got resp: ' + JSON.stringify(resMarshal));\n    const parsedUnit = ParseUnit(resMarshal.unit);\n\n    // The server returns a price, along with its unit. Out of the search results, the server\n    // chooses the most common unit to include in this average price. Now, we must determine\n    // how to transform this unit into the unit given by the user.\n    //\n    // There are 3 possible cases:\n    //    1. The unit returned by the server is the same as the user's unit. No need to do any conversions.\n    //    2. The unit returned by the server is in the same class (volume or mass) as the user's unit, so can be easily converted via table.\n    //    3. The unit returned by the server is in a different class as the user's unit. This leads to 2 risky options and a shitty fallback:\n    //        a. Try to google to determine the ingredient-specific volume <-> mass conversion for this unit\n    //        b. Try to use a handmade cache of common ingredient-specific conversions\n    //\n    //        c. As a fallback, ask the user to input their original amount in this new unit.\n\n    // No need for conversion\n    if (parsedUnit === ing.unit || ing.unit === Unit.None) {\n      return {\n        quantity: resMarshal.average,\n        unit: parsedUnit,\n      };\n    }\n\n    const price: Amount = {quantity: resMarshal.average, unit: parsedUnit};\n    console.log('Got price: ' + JSON.stringify(price));\n\n    // Volume -> volume conversion\n    if (VolumeUnits.includes(parsedUnit) && VolumeUnits.includes(ing.unit)) {\n      return ConvertUnit(price, ing.unit);\n    }\n\n    // Mass -> mass conversion\n    if (MassUnits.includes(parsedUnit) && MassUnits.includes(ing.unit)) {\n      return ConvertUnit(price, ing.unit);\n    }\n\n    // Try cache lookup\n    let conversionFactor = null;\n    Object.keys(OuncesToCups).forEach((ingName) => {\n      if (ing.name.includes(ingName)) conversionFactor = OuncesToCups[ingName];\n    })\n    if (conversionFactor) {\n      price.quantity = price.quantity * conversionFactor;\n      return ConvertUnit(price, ing.unit);\n    }\n\n    return {\n      quantity: -1,\n      unit: Unit.None,\n    };\n  }\n\n  private makeLabel(item: IngredientData): string {\n    return `Cost / ${this.displayPriceOf(item).unit}`;\n  }\n\n  private makeLink(item: IngredientData): string {\n    return `https://www.heb.com/search/?q=${item.name}`;\n  }\n\n  async nextStage() {\n    if (this.stage === 0) {\n      this.runParser();\n    }\n    this.stage++;\n    if (this.stage === 3) {\n      this.parsed.forEach(async (ing) => {\n        ing.price = await this.calculateIngPrice(ing).then((p) => {\n          console.log(`Price is ${p.quantity} per ${ing.unit}`)\n          this.$nextTick().then(() => {\n            this.$forceUpdate();\n            this.stage = 4;\n          })\n          return p;\n        });\n      })\n    }\n  }\n\n  private runParser() {\n    this.parsed = [];\n    this.autogrow.split(\"\\n\").forEach(line => this.parsed.push(ParseLine(line)));\n  }\n\n  private runTests() {\n    this.stage = -1;\n    this.statuses = [];\n    TestCases.forEach(tc => {\n      this.statuses.push({\n        name: tc.name,\n        status: \"NOT STARTED\"\n      });\n    });\n    TestCases.forEach(tc => {\n      const statusDataMaybe = this.statuses.find(s => s.name == tc.name);\n      let statusData = this.statuses[0];\n      if (statusDataMaybe) statusData = statusDataMaybe;\n      statusData.status = \"RUNNING\";\n      this.autogrow = tc.input;\n      this.runParser();\n      let correct = true;\n      let failed = \"\";\n      let reasonComplete = false;\n      this.parsed.forEach((ing, index) => {\n        if (ing.name !== tc.output[index].name) {\n          correct = false;\n          failed = `Expected: ${tc.output[index].name}\\nGot: ${ing.name}`;\n        }\n        if (ing.quantity !== tc.output[index].quantity) {\n          correct = false;\n          failed = `Expected: ${tc.output[index].quantity}\\nGot: ${ing.quantity}`;\n        }\n        if (ing.unit !== tc.output[index].unit) {\n          correct = false;\n          failed = `Expected: ${tc.output[index].unit}\\nGot: ${ing.unit}`;\n        }\n        if (!correct && !reasonComplete) {\n          failed += `\\nFailed at: ${JSON.stringify(ing, null, 4)}`;\n          reasonComplete = true;\n        }\n      });\n      if (correct) statusData.status = \"PASS\";\n      else {\n        statusData.status = \"FAIL\";\n        console.log(\"TEST FAILED: \\n\" + failed);\n      }\n    });\n  }\n\n  private displayPriceOf(ing: IngredientData): Amount {\n    if (ing.price) return ing.price;\n    return {\n      quantity: 0,\n      unit: ing.unit,\n    }\n  }\n\n  private backToMain() {\n    this.autogrow = \"\";\n    this.parsed = [];\n    this.stage = 0;\n  }\n\n  private testColor(name: string) {\n    const statusData = this.statuses.find(s => s.name == name);\n    if (statusData)\n      if (statusData.status == \"PASS\") return \"color: darkseagreen;\";\n    if (statusData) if (statusData.status == \"FAIL\") return \"color: orangered;\";\n  }\n\n  private setDarkMode() {\n    this.theme = \"testing\";\n  }\n\n  private setLightMode() {\n    this.theme = \"default\";\n  }\n\n  get testStatus(): TestStatus[] {\n    return this.statuses;\n  }\n\n  get topStyle(): string {\n    if (this.theme === \"default\") return \"\";\n    return \"background-color: #424242;\";\n  }\n\n  get appStyle(): string {\n    return `height: ${window.innerHeight}px`;\n  }\n\n  @Watch(\"stage\")\n  stageChanged(newStage: number) {\n    if (newStage === 1) {\n      setTimeout(() => {\n        this.stage++;\n      }, 0);\n    }\n  }\n}\n"],"sourceRoot":""}]}